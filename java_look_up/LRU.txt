class DLinkedNode {
    int key;
    int value;
    DLinkedNode pre;
    DLinkedNode post;
}

class LRUCache {
    HashTable<Integer, DLinkedNode> cache = new HashTable<Integer, DLinkedNode>();
    int count;
    int capacity;
    DLinkedNode head;
    DLinkedNode tail;
    LRUCache(int capacity){
        this.capacity = capacity;
        this.count = 0;
        head = new DLinkedNode();
        tail = new DLinkedNode();
        head.pre = null;
        head.post = tail;
        tail.pre = head;
        tail.post = null;
    }
    void addNode(DLinkedNode node){
        node.pre = head;
        node.post = head.post;
        head.post.pre = node;
        head.post = node;
    }
    void removeNode(DLinkedNode node){
        DLinkedNode pre = node.pre;
        DLinkedNode post = node.post;
        pre.post = post;
        post.pre = pre;
    }
    void moveNodeToHead(DLinkedNode node){
        this.removeNode(node);
        this.addNode(node);
    }
    DLinkedNode popTail(){
        DLinkedNode res = tail.pre;
        this.removeNode(res);
        return res;
    }
    int get(int key){
        DLinkedNode node = this.cache.get(key);
        if(node == null){
            return -1;
        }
        else{
            this.moveNodeToHead(node);
            return node.value;
        }
    }
    void set(int key, int value){
        DLinkedNode node = this.cache.get(key);
        if(node == null){
            DLinkedNode new_node = new DLinkedNode();
            new_node.key = key;
            new_node.value = value;
            this.cache.put(key, new_node);
            this.addNode(new_node);
            count++;
            if(count > capacity){
                DLinkedNode lru_node = this.popTail();
                this.cache.remove(lru_node.key);
                count--;
            }
        }
        else{
            node.value = value;
            this.moveNodeToHead(node);
        }
    }
}