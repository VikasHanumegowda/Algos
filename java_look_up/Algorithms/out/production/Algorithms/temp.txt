/*Insert in a sorted circular list*/
void sortedInsert(Node new_node) {
Node current = head;
if(head == null){
new_node.next = new_node;
head = new_node;
}
else if(current.data >= new_node.data){
while(current.next != head){
    current = current.next;
}
current.next = new_node;
new_node.next = head;
head = new_node;
}
else{
while(current.next != head && current.next.data < new_node.data){
current = current.next;
}
new_node.next = current.next;
current.next = new_node;
}
}


/* If it is a sumtree*/
int isLeaf(Node node){
if(node == null){
return 0;
}
if(node.left == null && node.right == null)
return 1;
return 0;
}
int sumTree(Node node){
int ls, rs;
if(node == null || isLeaf(node) == 1){
return 1;
}
if(sumTree(node.right) != 0 && sumTree(node.left) != 0){
if(node.left == null)
ls = 0;
else if(isLeaf(node.left))
ls = node.left.data;
else
ls = 2 * node.left.data;
if(node.right == null)
rs = 0;
else if(isLeaf(node.right))
rs = node.right.data;
else
rs = 2 * node.right.data;
if(node.data == rs +ls)
return 1;
return 0;
}
return 0;
}


/*
